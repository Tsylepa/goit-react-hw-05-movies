{"version":3,"file":"static/js/417.11c05960.chunk.js","mappings":"kRAEaA,EAAOC,EAAAA,GAAAA,GAAH,iqBA+BJC,EAAYD,EAAAA,GAAAA,EAAH,6C,mBCUtB,EAtCa,WACX,OAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,gHAE2BC,EAAAA,EAAAA,IAAaH,GAFxC,gBAEYF,EAFZ,EAEYA,KACRC,EAAQD,GAHZ,gDAKIM,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACN,IAGFF,IACE,SAACJ,EAAD,UACGI,EAAKS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACR,2BACE,gBACEC,IACED,EACI,kCAAoCA,EACpCE,EAENC,IAAKJ,KAEP,uBAAIA,KACJ,SAACd,EAAD,UAAYa,MAVLD,EADD,KAiBjB,C,2VCvCKO,EAAW,gCACXC,EAAM,mC,SAGGC,EAAY,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA2BC,GAA3B,yFACyBC,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,uCACqBC,EADrB,iBACiCE,EADjC,oBADzB,uBACUE,EADV,EACUA,KADV,kBAISA,GAJT,2EAQeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA4Bb,GAA5B,yFACyBW,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,iBACDP,EADC,oBACaQ,EADb,8CADzB,uBACUI,EADV,EACUA,KADV,kBAISA,GAJT,2EAQeE,EAAmB,GAAnBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAAkCC,GAAlC,yFACyBJ,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,gCACcC,EADd,kBAC2BO,EAD3B,oBADzB,uBACUH,EADV,EACUA,KADV,kBAISA,GAJT,2EAQeI,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA+BhB,GAA/B,yFACyBW,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,iBACDP,EADC,4BACqBQ,EADrB,oBADzB,uBACUI,EADV,EACUA,KADV,kBAISA,GAJT,2EAQejB,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BK,GAA5B,yFACyBW,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,iBACDP,EADC,4BACqBQ,EADrB,oBADzB,uBACUI,EADV,EACUA,KADV,kBAISA,GAJT,kE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","requests/requests.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Grid = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  grid-gap: 16px;\n  padding: 0;\n  margin: 20px auto;\n\n  li {\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    :hover {\n      transform: scale(1.03);\n      cursor: zoom-in;\n    }\n    img {\n      width: 100%;\n      height: 200px;\n      object-fit: cover;\n      border-radius: 4px;\n      box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n        0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n        0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    }\n    p {\n      margin: 0;\n      font-weight: 500;\n    }\n  }\n`;\n\nexport const Character = styled.p`\n  color: orangered;\n`;\n","import { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'requests';\nimport { useState, useEffect } from 'react';\nimport { Character, Grid } from './Cast.styled';\nimport actorPlaceholder from 'images/placeholder-profile.jpg';\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchCast() {\n      try {\n        const { cast } = await getMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    cast && (\n      <Grid>\n        {cast.map(({ id, character, name, profile_path }) => (\n          <li key={id}>\n            <img\n              src={\n                profile_path\n                  ? 'https://image.tmdb.org/t/p/w500' + profile_path\n                  : actorPlaceholder\n              }\n              alt={name}\n            />\n            <p>{name}</p>\n            <Character>{character}</Character>\n          </li>\n        ))}\n      </Grid>\n    )\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f8511e8dedf10eda656f1fd45ffd8165';\n\n//TRENDING\nasync function getTrending(page) {\n  const { data } = await axios.get(\n    `${BASE_URL}trending/movie/week?api_key=${KEY}&page=${page}&language=en-US`\n  );\n  return data;\n}\n\n//DETAILS\nasync function getMovieById(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${KEY}&append_to_response=videos&language=en-US`\n  );\n  return data;\n}\n\n//SEARCH\nasync function getMoviesByKeyword(keyword) {\n  const { data } = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${keyword}&language=en-US`\n  );\n  return data;\n}\n\n//REVIEWS\nasync function getMovieReviews(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${KEY}&language=en-US`\n  );\n  return data;\n}\n\n//CAST\nasync function getMovieCast(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return data;\n}\n\nexport {\n  getTrending,\n  getMovieById,\n  getMoviesByKeyword,\n  getMovieReviews,\n  getMovieCast,\n};\n"],"names":["Grid","styled","Character","useState","cast","setCast","movieId","useParams","useEffect","getMovieCast","console","log","fetchCast","map","id","character","name","profile_path","src","actorPlaceholder","alt","BASE_URL","KEY","getTrending","page","axios","data","getMovieById","getMoviesByKeyword","keyword","getMovieReviews"],"sourceRoot":""}